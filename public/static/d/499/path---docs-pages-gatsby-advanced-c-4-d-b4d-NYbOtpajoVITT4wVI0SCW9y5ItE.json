{"data":{"markdownRemark":{"html":"<blockquote>\n<p><a href=\"https://raw.githubusercontent.com/Vagr9K/gatsby-advanced-starter/master/gatsby-node.js\">Source</a></p>\n</blockquote>\n<h1>Borrowed from \"Advanced-Gatsby-Starter\"</h1>\n<div class=\"gatsby-highlight\" data-language=\"basic\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-basic line-numbers\"><code class=\"language-basic\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> siteConfig <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/SiteConfig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> postNodes <span class=\"token operator\">=</span> []<span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> postNodes <span class=\"token operator\">=</span> <span class=\"token function\">ARRAY</span> \n                      <span class=\"token operator\">/</span><span class=\"token operator\">/</span> used <span class=\"token keyword\">as</span> <span class=\"token string\">\"postNodes.push(node);\"</span> <span class=\"token function\">in</span> createNodeField\n<span class=\"token keyword\">function</span> addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span> {\n  postNodes.sort<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>{ frontmatter<span class=\"token punctuation\">:</span> { <span class=\"token function\">date</span><span class=\"token punctuation\">:</span> date1 } }<span class=\"token punctuation\">,</span> { frontmatter<span class=\"token punctuation\">:</span> { <span class=\"token function\">date</span><span class=\"token punctuation\">:</span> date2 } }<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n      <span class=\"token keyword\">const</span> dateA <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">,</span> siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> dateB <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">,</span> siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateA.isBefore<span class=\"token punctuation\">(</span>dateB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateB.isBefore<span class=\"token punctuation\">(</span>dateA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    }\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token keyword\">End</span> postNodes.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token function\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> postNodes.<span class=\"token function\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> {\n    <span class=\"token keyword\">const</span> nextID <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> postNodes.<span class=\"token function\">length</span> ? i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> prevID <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> ? i <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> postNodes.<span class=\"token function\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currNode <span class=\"token operator\">=</span> postNodes[i]<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextNode <span class=\"token operator\">=</span> postNodes[nextID]<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> prevNode <span class=\"token operator\">=</span> postNodes[prevID]<span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span>{\n      node<span class=\"token punctuation\">:</span> currNode<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nextTitle\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> nextNode.frontmatter.title\n    }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span>{\n      node<span class=\"token punctuation\">:</span> currNode<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nextSlug\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> nextNode.fields.slug\n    }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span>{\n      node<span class=\"token punctuation\">:</span> currNode<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"prevTitle\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> prevNode.frontmatter.title\n    }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span>{\n      node<span class=\"token punctuation\">:</span> currNode<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"prevSlug\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> prevNode.fields.slug\n    }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  }\n}\n\nexports.onCreateNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>{ node<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> getNode }<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n  <span class=\"token keyword\">const</span> { createNodeField } <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">let</span> slug<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node.<span class=\"token function\">internal</span>.<span class=\"token keyword\">type</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> {\n    <span class=\"token keyword\">const</span> fileNode <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>node.parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> parsedFilePath <span class=\"token operator\">=</span> path.parse<span class=\"token punctuation\">(</span>fileNode.relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      Object.prototype.hasOwnProperty.<span class=\"token keyword\">call</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">&amp;</span>\n      Object.prototype.hasOwnProperty.<span class=\"token keyword\">call</span><span class=\"token punctuation\">(</span>node.frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> {\n      slug <span class=\"token operator\">=</span> `<span class=\"token operator\">/</span>${_.kebabCase<span class=\"token punctuation\">(</span>node.frontmatter.title<span class=\"token punctuation\">)</span>}`<span class=\"token punctuation\">;</span>\n    } <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath.<span class=\"token keyword\">name</span> <span class=\"token comment\">!== \"index\" &amp;&amp; parsedFilePath.dir !== \"\") {</span>\n      slug <span class=\"token operator\">=</span> `<span class=\"token operator\">/</span>${parsedFilePath.dir}<span class=\"token operator\">/</span>${parsedFilePath.<span class=\"token keyword\">name</span>}<span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    } <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath.dir <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> {\n      slug <span class=\"token operator\">=</span> `<span class=\"token operator\">/</span>${parsedFilePath.<span class=\"token keyword\">name</span>}<span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    } <span class=\"token keyword\">else</span> {\n      slug <span class=\"token operator\">=</span> `<span class=\"token operator\">/</span>${parsedFilePath.dir}<span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    }\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.<span class=\"token keyword\">call</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> {\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.<span class=\"token keyword\">call</span><span class=\"token punctuation\">(</span>node.frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        slug <span class=\"token operator\">=</span> `<span class=\"token operator\">/</span>${_.kebabCase<span class=\"token punctuation\">(</span>node.frontmatter.slug<span class=\"token punctuation\">)</span>}`<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.<span class=\"token keyword\">call</span><span class=\"token punctuation\">(</span>node.frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> {\n        <span class=\"token keyword\">const</span> <span class=\"token function\">date</span> <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>node.frontmatter.<span class=\"token function\">date</span><span class=\"token punctuation\">,</span> siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">!date.isValid)</span>\n          console.warn<span class=\"token punctuation\">(</span>`WARNING<span class=\"token punctuation\">:</span> Invalid <span class=\"token function\">date</span>.`<span class=\"token punctuation\">,</span> node.frontmatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        createNodeField<span class=\"token punctuation\">(</span>{\n          node<span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> <span class=\"token function\">date</span>.toISOString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      }\n    }\n    createNodeField<span class=\"token punctuation\">(</span>{ node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> slug }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    postNodes.push<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  }\n}<span class=\"token punctuation\">;</span>\n\nexports.setFieldsOnGraphQLNodeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>{ <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> actions }<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n  <span class=\"token keyword\">const</span> { <span class=\"token keyword\">name</span> } <span class=\"token operator\">=</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> { createNodeField } <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">name</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> {\n    addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  }\n}<span class=\"token punctuation\">;</span>\n\nexports.createPages <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>{ graphql<span class=\"token punctuation\">,</span> actions }<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n  <span class=\"token keyword\">const</span> { createPage } <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> new Promise<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n    <span class=\"token keyword\">const</span> postPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/post.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> tagPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/tag.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> categoryPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/category.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resolve<span class=\"token punctuation\">(</span>\n      graphql<span class=\"token punctuation\">(</span>\n        `\n          {\n            allMarkdownRemark {\n              edges {\n                node {\n                  frontmatter {\n                    tags\n                    category\n                  }\n                  fields {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        `\n      <span class=\"token punctuation\">)</span>.<span class=\"token keyword\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span> {\n          <span class=\"token operator\">/</span><span class=\"token operator\">*</span> eslint no<span class=\"token operator\">-</span>console<span class=\"token punctuation\">:</span> <span class=\"token string\">\"off\"</span> <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n          console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          reject<span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        }\n\n        <span class=\"token keyword\">const</span> tagSet <span class=\"token operator\">=</span> new <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> categorySet <span class=\"token operator\">=</span> new <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result.<span class=\"token keyword\">data</span>.allMarkdownRemark.edges.forEach<span class=\"token punctuation\">(</span>edge <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge.node.frontmatter.tags<span class=\"token punctuation\">)</span> {\n            edge.node.frontmatter.tags.forEach<span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n              tagSet.add<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          }\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge.node.frontmatter.category<span class=\"token punctuation\">)</span> {\n            categorySet.add<span class=\"token punctuation\">(</span>edge.node.frontmatter.category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          }\n\n          createPage<span class=\"token punctuation\">(</span>{\n            path<span class=\"token punctuation\">:</span> edge.node.fields.slug<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> postPage<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> {\n              slug<span class=\"token punctuation\">:</span> edge.node.fields.slug\n            }\n          }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> tagList <span class=\"token operator\">=</span> <span class=\"token function\">Array</span>.from<span class=\"token punctuation\">(</span>tagSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tagList.forEach<span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n          createPage<span class=\"token punctuation\">(</span>{\n            path<span class=\"token punctuation\">:</span> `<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span>${_.kebabCase<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span>}<span class=\"token operator\">/</span>`<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> tagPage<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> {\n              tag\n            }\n          }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> categoryList <span class=\"token operator\">=</span> <span class=\"token function\">Array</span>.from<span class=\"token punctuation\">(</span>categorySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        categoryList.forEach<span class=\"token punctuation\">(</span>category <span class=\"token operator\">=</span><span class=\"token operator\">></span> {\n          createPage<span class=\"token punctuation\">(</span>{\n            path<span class=\"token punctuation\">:</span> `<span class=\"token operator\">/</span>categories<span class=\"token operator\">/</span>${_.kebabCase<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span>}<span class=\"token operator\">/</span>`<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> categoryPage<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> {\n              category\n            }\n          }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      }<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  }<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n}<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Gatsby","date":"2018-08-28"}}},"pageContext":{"slug":"/docs/pages/Gatsby-Advanced/"}}