{"data":{"markdownRemark":{"html":"<blockquote>\n<p><a href=\"https://raw.githubusercontent.com/Vagr9K/gatsby-advanced-starter/master/gatsby-node.js\">Source</a></p>\n</blockquote>\n<h1>Borrowed from \"Advanced-Gatsby-Starter\"</h1>\n<div class=\"gatsby-highlight\" data-language=\"aspnet\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-aspnet line-numbers\"><code class=\"language-aspnet\">const path = require(\"path\");\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst siteConfig = require(\"./data/SiteConfig\");\n\nconst postNodes = []; // postNodes = ARRAY \n                      // used as \"postNodes.push(node);\" in createNodeField\nfunction addSiblingNodes(createNodeField) {\n  postNodes.sort(\n    ({ frontmatter: { date: date1 } }, { frontmatter: { date: date2 } }) => {\n      const dateA = moment(date1, siteConfig.dateFromFormat);\n      const dateB = moment(date2, siteConfig.dateFromFormat);\n\n      if (dateA.isBefore(dateB)) return 1;\n\n      if (dateB.isBefore(dateA)) return -1;\n\n      return 0;\n    }\n  );//End postNodes.sort()\n  for (let i = 0; i &lt; postNodes.length; i += 1) {\n    const nextID = i + 1 &lt; postNodes.length ? i + 1 : 0;\n    const prevID = i - 1 > 0 ? i - 1 : postNodes.length - 1;\n    const currNode = postNodes[i];\n    const nextNode = postNodes[nextID];\n    const prevNode = postNodes[prevID];\n    createNodeField({\n      node: currNode,\n      name: \"nextTitle\",\n      value: nextNode.frontmatter.title\n    });\n    createNodeField({\n      node: currNode,\n      name: \"nextSlug\",\n      value: nextNode.fields.slug\n    });\n    createNodeField({\n      node: currNode,\n      name: \"prevTitle\",\n      value: prevNode.frontmatter.title\n    });\n    createNodeField({\n      node: currNode,\n      name: \"prevSlug\",\n      value: prevNode.fields.slug\n    });\n  }\n}\n\nexports.onCreateNode = ({ node, actions, getNode }) => {\n  const { createNodeField } = actions;\n  let slug;\n  if (node.internal.type === \"MarkdownRemark\") {\n    const fileNode = getNode(node.parent);\n    const parsedFilePath = path.parse(fileNode.relativePath);\n    if (\n      Object.prototype.hasOwnProperty.call(node, \"frontmatter\") &amp;&amp;\n      Object.prototype.hasOwnProperty.call(node.frontmatter, \"title\")\n    ) {\n      slug = `/${_.kebabCase(node.frontmatter.title)}`;\n    } else if (parsedFilePath.name !== \"index\" &amp;&amp; parsedFilePath.dir !== \"\") {\n      slug = `/${parsedFilePath.dir}/${parsedFilePath.name}/`;\n    } else if (parsedFilePath.dir === \"\") {\n      slug = `/${parsedFilePath.name}/`;\n    } else {\n      slug = `/${parsedFilePath.dir}/`;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, \"frontmatter\")) {\n      if (Object.prototype.hasOwnProperty.call(node.frontmatter, \"slug\"))\n        slug = `/${_.kebabCase(node.frontmatter.slug)}`;\n      if (Object.prototype.hasOwnProperty.call(node.frontmatter, \"date\")) {\n        const date = moment(node.frontmatter.date, siteConfig.dateFromFormat);\n        if (!date.isValid)\n          console.warn(`WARNING: Invalid date.`, node.frontmatter);\n\n        createNodeField({\n          node,\n          name: \"date\",\n          value: date.toISOString()\n        });\n      }\n    }\n    createNodeField({ node, name: \"slug\", value: slug });\n    postNodes.push(node);\n  }\n};\n\nexports.setFieldsOnGraphQLNodeType = ({ type, actions }) => {\n  const { name } = type;\n  const { createNodeField } = actions;\n  if (name === \"MarkdownRemark\") {\n    addSiblingNodes(createNodeField);\n  }\n};\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions;\n\n  return new Promise((resolve, reject) => {\n    const postPage = path.resolve(\"src/templates/post.jsx\");\n    const tagPage = path.resolve(\"src/templates/tag.jsx\");\n    const categoryPage = path.resolve(\"src/templates/category.jsx\");\n    resolve(\n      graphql(\n        `\n          {\n            allMarkdownRemark {\n              edges {\n                node {\n                  frontmatter {\n                    tags\n                    category\n                  }\n                  fields {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        `\n      ).then(result => {\n        if (result.errors) {\n          /* eslint no-console: \"off\" */\n          console.log(result.errors);\n          reject(result.errors);\n        }\n\n        const tagSet = new Set();\n        const categorySet = new Set();\n        result.data.allMarkdownRemark.edges.forEach(edge => {\n          if (edge.node.frontmatter.tags) {\n            edge.node.frontmatter.tags.forEach(tag => {\n              tagSet.add(tag);\n            });\n          }\n\n          if (edge.node.frontmatter.category) {\n            categorySet.add(edge.node.frontmatter.category);\n          }\n\n          createPage({\n            path: edge.node.fields.slug,\n            component: postPage,\n            context: {\n              slug: edge.node.fields.slug\n            }\n          });\n        });\n\n        const tagList = Array.from(tagSet);\n        tagList.forEach(tag => {\n          createPage({\n            path: `/tags/${_.kebabCase(tag)}/`,\n            component: tagPage,\n            context: {\n              tag\n            }\n          });\n        });\n\n        const categoryList = Array.from(categorySet);\n        categoryList.forEach(category => {\n          createPage({\n            path: `/categories/${_.kebabCase(category)}/`,\n            component: categoryPage,\n            context: {\n              category\n            }\n          });\n        });\n      })\n    );\n  });\n};</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Gatsby","date":"2018-08-28"}}},"pageContext":{"slug":"/docs/pages/Gatsby-Advanced/"}}