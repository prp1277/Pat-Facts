{"data":{"markdownRemark":{"html":"<blockquote>\n<p><a href=\"https://raw.githubusercontent.com/Vagr9K/gatsby-advanced-starter/master/gatsby-node.js\">Source</a></p>\n</blockquote>\n<h1>Borrowed from \"Advanced-Gatsby-Starter\"</h1>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-powershell line-numbers\"><code class=\"language-powershell\">const path = require<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst _ = require<span class=\"token punctuation\">(</span><span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst moment = require<span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst siteConfig = require<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/SiteConfig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconst postNodes = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> postNodes = ARRAY \n                      <span class=\"token operator\">/</span><span class=\"token operator\">/</span> used as <span class=\"token string\">\"postNodes.push(node);\"</span> in createNodeField\n<span class=\"token keyword\">function</span> addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  postNodes<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> frontmatter: <span class=\"token punctuation\">{</span> date: date1 <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frontmatter: <span class=\"token punctuation\">{</span> date: date2 <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">{</span>\n      const dateA = moment<span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">,</span> siteConfig<span class=\"token punctuation\">.</span>dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      const dateB = moment<span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">,</span> siteConfig<span class=\"token punctuation\">.</span>dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateA<span class=\"token punctuation\">.</span>isBefore<span class=\"token punctuation\">(</span>dateB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> 1<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateB<span class=\"token punctuation\">.</span>isBefore<span class=\"token punctuation\">(</span>dateA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>1<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token keyword\">End</span> postNodes<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i = 0<span class=\"token punctuation\">;</span> i &lt; postNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> 1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    const nextID = i <span class=\"token operator\">+</span> 1 &lt; postNodes<span class=\"token punctuation\">.</span>length ? i <span class=\"token operator\">+</span> 1 : 0<span class=\"token punctuation\">;</span>\n    const prevID = i <span class=\"token operator\">-</span> 1 > 0 ? i <span class=\"token operator\">-</span> 1 : postNodes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> 1<span class=\"token punctuation\">;</span>\n    const currNode = postNodes<span class=\"token namespace\">[i]</span><span class=\"token punctuation\">;</span>\n    const nextNode = postNodes<span class=\"token namespace\">[nextID]</span><span class=\"token punctuation\">;</span>\n    const prevNode = postNodes<span class=\"token namespace\">[prevID]</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode<span class=\"token punctuation\">,</span>\n      name: <span class=\"token string\">\"nextTitle\"</span><span class=\"token punctuation\">,</span>\n      value: nextNode<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode<span class=\"token punctuation\">,</span>\n      name: <span class=\"token string\">\"nextSlug\"</span><span class=\"token punctuation\">,</span>\n      value: nextNode<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode<span class=\"token punctuation\">,</span>\n      name: <span class=\"token string\">\"prevTitle\"</span><span class=\"token punctuation\">,</span>\n      value: prevNode<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode<span class=\"token punctuation\">,</span>\n      name: <span class=\"token string\">\"prevSlug\"</span><span class=\"token punctuation\">,</span>\n      value: prevNode<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>onCreateNode = <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> = actions<span class=\"token punctuation\">;</span>\n  let slug<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span><span class=\"token function\">type</span> === <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    const fileNode = getNode<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const parsedFilePath = path<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>fileNode<span class=\"token punctuation\">.</span>relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">)</span> &amp;&amp;\n      Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug = `<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>_<span class=\"token punctuation\">.</span>kebabCase<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!</span>== <span class=\"token string\">\"index\"</span> &amp;&amp; parsedFilePath<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span> <span class=\"token operator\">!</span>== <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug = `<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>parsedFilePath<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>parsedFilePath<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span> === <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug = `<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>parsedFilePath<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      slug = `<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>parsedFilePath<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        slug = `<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>_<span class=\"token punctuation\">.</span>kebabCase<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        const date = moment<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span> siteConfig<span class=\"token punctuation\">.</span>dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date<span class=\"token punctuation\">.</span>isValid<span class=\"token punctuation\">)</span>\n          console<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span>`WARNING: Invalid date<span class=\"token punctuation\">.</span>`<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          node<span class=\"token punctuation\">,</span>\n          name: <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span>\n          value: date<span class=\"token punctuation\">.</span>toISOString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> name: <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">,</span> value: slug <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    postNodes<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>setFieldsOnGraphQLNodeType = <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function\">type</span><span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> = <span class=\"token function\">type</span><span class=\"token punctuation\">;</span>\n  const <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> = actions<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name === <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>createPages = <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> = actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> new Promise<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">{</span>\n    const postPage = path<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/post.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const tagPage = path<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/tag.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const categoryPage = path<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/category.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resolve<span class=\"token punctuation\">(</span>\n      graphql<span class=\"token punctuation\">(</span>\n        `\n          <span class=\"token punctuation\">{</span>\n            allMarkdownRemark <span class=\"token punctuation\">{</span>\n              edges <span class=\"token punctuation\">{</span>\n                node <span class=\"token punctuation\">{</span>\n                  frontmatter <span class=\"token punctuation\">{</span>\n                    tags\n                    category\n                  <span class=\"token punctuation\">}</span>\n                  fields <span class=\"token punctuation\">{</span>\n                    slug\n                  <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        `\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>then<span class=\"token punctuation\">(</span>result => <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">*</span> eslint no<span class=\"token operator\">-</span>console: <span class=\"token string\">\"off\"</span> <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n          console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          reject<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        const tagSet = new <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        const categorySet = new <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token keyword\">forEach</span><span class=\"token punctuation\">(</span>edge => <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token keyword\">forEach</span><span class=\"token punctuation\">(</span>tag => <span class=\"token punctuation\">{</span>\n              tagSet<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            categorySet<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n            component: postPage<span class=\"token punctuation\">,</span>\n            context: <span class=\"token punctuation\">{</span>\n              slug: edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        const tagList = Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>tagSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tagList<span class=\"token punctuation\">.</span><span class=\"token keyword\">forEach</span><span class=\"token punctuation\">(</span>tag => <span class=\"token punctuation\">{</span>\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: `<span class=\"token operator\">/</span>tags<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>_<span class=\"token punctuation\">.</span>kebabCase<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>`<span class=\"token punctuation\">,</span>\n            component: tagPage<span class=\"token punctuation\">,</span>\n            context: <span class=\"token punctuation\">{</span>\n              tag\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        const categoryList = Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>categorySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        categoryList<span class=\"token punctuation\">.</span><span class=\"token keyword\">forEach</span><span class=\"token punctuation\">(</span>category => <span class=\"token punctuation\">{</span>\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: `<span class=\"token operator\">/</span>categories<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>_<span class=\"token punctuation\">.</span>kebabCase<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>`<span class=\"token punctuation\">,</span>\n            component: categoryPage<span class=\"token punctuation\">,</span>\n            context: <span class=\"token punctuation\">{</span>\n              category\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Gatsby","date":"2018-08-28"}}},"pageContext":{"slug":"/docs/pages/Gatsby-Advanced/"}}