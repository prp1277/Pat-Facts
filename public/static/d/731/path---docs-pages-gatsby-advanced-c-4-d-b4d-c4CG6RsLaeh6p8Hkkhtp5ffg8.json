{"data":{"markdownRemark":{"html":"<blockquote>\n<p><a href=\"https://raw.githubusercontent.com/Vagr9K/gatsby-advanced-starter/master/gatsby-node.js\">Source</a></p>\n</blockquote>\n<h1>Borrowed from \"Advanced-Gatsby-Starter\"</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">const path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst _ <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst moment <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst siteConfig <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/SiteConfig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconst postNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> // postNodes <span class=\"token operator\">=</span> ARRAY \n                      // used as <span class=\"token string\">\"postNodes.push(node);\"</span> <span class=\"token keyword\">in</span> createNodeField\n<span class=\"token keyword\">function</span> addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  postNodes.sort<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> frontmatter: <span class=\"token punctuation\">{</span> date: date1 <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>, <span class=\"token punctuation\">{</span> frontmatter: <span class=\"token punctuation\">{</span> date: date2 <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      const dateA <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>date1, siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      const dateB <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>date2, siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateA.isBefore<span class=\"token punctuation\">(</span>dateB<span class=\"token punctuation\">))</span> <span class=\"token keyword\">return</span> 1<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateB.isBefore<span class=\"token punctuation\">(</span>dateA<span class=\"token punctuation\">))</span> <span class=\"token keyword\">return</span> -1<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//End postNodes.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> postNodes.length<span class=\"token punctuation\">;</span> i +<span class=\"token operator\">=</span> 1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    const nextID <span class=\"token operator\">=</span> i + 1 <span class=\"token operator\">&lt;</span> postNodes.length ? i + 1 <span class=\"token keyword\">:</span> 0<span class=\"token punctuation\">;</span>\n    const prevID <span class=\"token operator\">=</span> i - 1 <span class=\"token operator\">></span> 0 ? i - 1 <span class=\"token keyword\">:</span> postNodes.length - 1<span class=\"token punctuation\">;</span>\n    const currNode <span class=\"token operator\">=</span> postNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    const nextNode <span class=\"token operator\">=</span> postNodes<span class=\"token punctuation\">[</span>nextID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    const prevNode <span class=\"token operator\">=</span> postNodes<span class=\"token punctuation\">[</span>prevID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode,\n      name: <span class=\"token string\">\"nextTitle\"</span>,\n      value: nextNode.frontmatter.title\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode,\n      name: <span class=\"token string\">\"nextSlug\"</span>,\n      value: nextNode.fields.slug\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode,\n      name: <span class=\"token string\">\"prevTitle\"</span>,\n      value: prevNode.frontmatter.title\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node: currNode,\n      name: <span class=\"token string\">\"prevSlug\"</span>,\n      value: prevNode.fields.slug\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nexports.onCreateNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node, actions, getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> slug<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node.internal.type <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    const fileNode <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>node.parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const parsedFilePath <span class=\"token operator\">=</span> path.parse<span class=\"token punctuation\">(</span>fileNode.relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      Object.prototype.hasOwnProperty.call<span class=\"token punctuation\">(</span>node, <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n      Object.prototype.hasOwnProperty.call<span class=\"token punctuation\">(</span>node.frontmatter, <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>/$<span class=\"token punctuation\">{</span>_.kebabCase<span class=\"token punctuation\">(</span>node.frontmatter.title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath.name <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"index\"</span> <span class=\"token operator\">&amp;&amp;</span> parsedFilePath.dir <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>/$<span class=\"token punctuation\">{</span>parsedFilePath.dir<span class=\"token punctuation\">}</span>/$<span class=\"token punctuation\">{</span>parsedFilePath.name<span class=\"token punctuation\">}</span>/<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedFilePath.dir <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slug <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>/$<span class=\"token punctuation\">{</span>parsedFilePath.name<span class=\"token punctuation\">}</span>/<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      slug <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>/$<span class=\"token punctuation\">{</span>parsedFilePath.dir<span class=\"token punctuation\">}</span>/<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.call<span class=\"token punctuation\">(</span>node, <span class=\"token string\">\"frontmatter\"</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.call<span class=\"token punctuation\">(</span>node.frontmatter, <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">))</span>\n        slug <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span>/$<span class=\"token punctuation\">{</span>_.kebabCase<span class=\"token punctuation\">(</span>node.frontmatter.slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object.prototype.hasOwnProperty.call<span class=\"token punctuation\">(</span>node.frontmatter, <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n        const <span class=\"token function\">date</span> <span class=\"token operator\">=</span> moment<span class=\"token punctuation\">(</span>node.frontmatter.date, siteConfig.dateFromFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date.isValid<span class=\"token punctuation\">)</span>\n          console.warn<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>WARNING: Invalid date.<span class=\"token variable\">`</span></span>, node.frontmatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          node,\n          name: <span class=\"token string\">\"date\"</span>,\n          value: date.toISOString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    createNodeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node, name: <span class=\"token string\">\"slug\"</span>, value: slug <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    postNodes.push<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports.setFieldsOnGraphQLNodeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type, actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">;</span>\n  const <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"MarkdownRemark\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addSiblingNodes<span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports.createPages <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql, actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  const <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> new Promise<span class=\"token punctuation\">((</span>resolve, reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    const postPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/post.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const tagPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/tag.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const categoryPage <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/category.jsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resolve<span class=\"token punctuation\">(</span>\n      graphql<span class=\"token punctuation\">(</span>\n        <span class=\"token variable\"><span class=\"token variable\">`</span>\n          <span class=\"token punctuation\">{</span>\n            allMarkdownRemark <span class=\"token punctuation\">{</span>\n              edges <span class=\"token punctuation\">{</span>\n                node <span class=\"token punctuation\">{</span>\n                  frontmatter <span class=\"token punctuation\">{</span>\n                    tags\n                    category\n                  <span class=\"token punctuation\">}</span>\n                  fields <span class=\"token punctuation\">{</span>\n                    slug\n                  <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token variable\">`</span></span>\n      <span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          /* eslint no-console: <span class=\"token string\">\"off\"</span> */\n          console.log<span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          reject<span class=\"token punctuation\">(</span>result.errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        const tagSet <span class=\"token operator\">=</span> new Set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        const categorySet <span class=\"token operator\">=</span> new Set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result.data.allMarkdownRemark.edges.forEach<span class=\"token punctuation\">(</span>edge <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge.node.frontmatter.tags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            edge.node.frontmatter.tags.forEach<span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n              tagSet.add<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge.node.frontmatter.category<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            categorySet.add<span class=\"token punctuation\">(</span>edge.node.frontmatter.category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: edge.node.fields.slug,\n            component: postPage,\n            context: <span class=\"token punctuation\">{</span>\n              slug: edge.node.fields.slug\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        const tagList <span class=\"token operator\">=</span> Array.from<span class=\"token punctuation\">(</span>tagSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tagList.forEach<span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: <span class=\"token variable\"><span class=\"token variable\">`</span>/tags/$<span class=\"token punctuation\">{</span>_.kebabCase<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>/<span class=\"token variable\">`</span></span>,\n            component: tagPage,\n            context: <span class=\"token punctuation\">{</span>\n              tag\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        const categoryList <span class=\"token operator\">=</span> Array.from<span class=\"token punctuation\">(</span>categorySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        categoryList.forEach<span class=\"token punctuation\">(</span>category <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          createPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path: <span class=\"token variable\"><span class=\"token variable\">`</span>/categories/$<span class=\"token punctuation\">{</span>_.kebabCase<span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>/<span class=\"token variable\">`</span></span>,\n            component: categoryPage,\n            context: <span class=\"token punctuation\">{</span>\n              category\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Gatsby","date":"2018-08-28"}}},"pageContext":{"slug":"/docs/pages/Gatsby-Advanced/"}}